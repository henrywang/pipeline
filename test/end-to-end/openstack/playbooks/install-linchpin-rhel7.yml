# This playbook is intended to allow installation of 'cinch' into a virtualenv
# on RHEL7, and the primary purpose for its existence is the fact that the
# various python packaging tools (pip, virtualenv, setuptools, etc) are too old
# on RHEL7 to work with newer Python libraries such as those required by
# 'cinch'.
#
# This playbook was tested with Ansible 2.4.1.0

- name: install cinch into a virtualenv on RHEL7
  hosts: localhost
  vars:
    jenkins_home: /var/lib/jenkins
    venvs:
      cinch: "{{ jenkins_home }}/opt/cinch"
      linchpin: "{{ jenkins_home }}/opt/linchpin"
    delete_venv: false

  tasks:
    - name: fail if we are not running this playbook on RHEL7
      fail:
        msg: "this playbook may only be run on RHEL7"
      when: ansible_os_family != "RedHat" or ansible_distribution_major_version != "7"

    - name: ensure we are running as the jenkins user
      fail:
        msg: "this playbook must run as the 'jenkins' user"
      when: ansible_user_id != "jenkins"

    - name: check for /var/lib/jenkins directory
      stat:
        path: "{{ jenkins_home }}"
      register: jenkins_home_stat_result

    - name: fail if /var/lib/jenkins does not exist
      fail:
        msg: "directory {{ jenkins_home }} must exist for this playbook to run"
      when: not jenkins_home_stat_result.stat.exists

    - name: check for existing virtualenvs
      stat:
        path: "{{ item.value }}"
      with_dict: "{{ venvs }}"
      register: venv_stat_result

    - name: >-
        fail if pre-existing virtualenvs are found and cannot be deleted because
        delete_venv is set to 'false'
      fail:
        msg: "directory {{ item.item.value }} exists, but 'delete_venv' setting is False"
      with_items: "{{ venv_stat_result.results }}"
      when: item.stat.exists == true and not (delete_venv|bool)
    - name: >-
        delete existing virtualenv directory (disabled by default, override
        with DELETE_VENV Jenkins job parameter or delete_venv playbook variable)
      file:
        path: "{{ item.value }}"
        state: absent
      with_dict: "{{ venvs }}"
      when: (delete_venv|bool)
    - name: >-
        create virtualenvs with --system-site-packages to allow for selinux
        module compatibility, then upgrade setuptools and pip
      pip:
        name: setuptools pip
        virtualenv: "{{ item.value }}"
        extra_args: -U
        virtualenv_site_packages: true
      with_dict: "{{ venvs }}"
    - name: install version 1.5.4 of linchpin using pip
      pip:
        name: linchpin
        virtualenv: "{{ venvs.linchpin }}"
        extra_args: -U
        version: 1.5.4
